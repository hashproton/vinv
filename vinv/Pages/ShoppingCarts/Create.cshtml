@page
@model vinv.Pages.ShoppingCarts.CreateModel
@{
    ViewData["Title"] = "Create Shopping Cart";
}
<h1>Create Shopping Cart</h1>
<h4>Update the stock of low stock products</h4>
<hr />

<div asp-validation-summary="All" class="text-danger"></div>

<form method="post">
    <div class="row">
        <div class="col-md-12">
            <table class="table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Current Stock</th>
                        <th class="d-none d-md-table-cell">Minimal Stock</th>
                        <th>Quantity to Buy</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.LowStockProducts.Count; i++)
                    {
                        <tr>
                            <td>@Model.LowStockProducts[i].ProductName</td>
                            <td>
                                <input type="hidden" asp-for="@Model.LowStockProducts[i].Id" />
                                <input type="hidden" asp-for="@Model.LowStockProducts[i].ProductName" />
                                <input type="hidden" asp-for="@Model.LowStockProducts[i].MinimalStock" />
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <button type="button" class="btn btn-outline-secondary decrease-stock">-</button>
                                    </div>
                                    <input type="number" asp-for="@Model.LowStockProducts[i].Stock" class="form-control stock-input" min="0" step="any" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-outline-secondary increase-stock">+</button>
                                    </div>
                                </div>
                                <span asp-validation-for="@Model.LowStockProducts[i].Stock" class="text-danger"></span>
                            </td>
                            <td class="d-none d-md-table-cell">@Model.LowStockProducts[i].MinimalStock</td>
                            <td class="quantity-to-buy">@(Model.LowStockProducts[i].MinimalStock - Model.LowStockProducts[i].Stock)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="form-group">
        <input type="submit" value="Update the quantity of the edited products" class="btn btn-primary" />
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.querySelectorAll('.stock-input').forEach(input => {
            const row = input.closest('tr');
            const decreaseBtn = row.querySelector('.decrease-stock');
            const increaseBtn = row.querySelector('.increase-stock');
            const quantityToBuyCell = row.querySelector('.quantity-to-buy');
            const minimalStock = parseFloat(row.querySelector('input[name$=".MinimalStock"]').value);

            function updateQuantityToBuy() {
                const currentStock = parseFloat(input.value) || 0;
                const quantityToBuy = Math.max(0, minimalStock - currentStock);
                quantityToBuyCell.textContent = quantityToBuy.toFixed(2);

                if (currentStock >= minimalStock) {
                    row.style.textDecoration = 'line-through';
                } else {
                    row.style.textDecoration = 'none';
                }
            }

            input.addEventListener('input', updateQuantityToBuy);

            decreaseBtn.addEventListener('click', () => {
                input.value = Math.max(0, (parseFloat(input.value) || 0) - 1).toFixed(2);
                updateQuantityToBuy();
            });

            increaseBtn.addEventListener('click', () => {
                input.value = ((parseFloat(input.value) || 0) + 1).toFixed(2);
                updateQuantityToBuy();
            });

            // Initial update
            updateQuantityToBuy();
        });
    </script>
}